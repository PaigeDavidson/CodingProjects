UML:
***********************
MemoryCard
***********************
- __idNumber
- __faceUp
***********************
constructor:
    define initializer with variables:
    (self, idNumber)
methods:
     getValue
     toggleFlipped
     isFlipped
     displayCard

MemoryCard Class Development Plan
    This class creates cards each with a specific id with two cards each that refer to the same ACII value so
    they can create a match

    __init_ method:
    - needs a self parameter and an idnumber parameter
    - should include two private variables including an id number and a faceup variable that returns a boolean

    getValue method:
    - creates a value for each card
    - there must be two of each value so the cards can match
    - use integer division on the __idNumber and add 33 so you get the correct range of ANSCII value characters
    - return the val

     toggleFlipped method:
     - switch the boolean of the faceup variable to the opposite boolean using the not comparison

     isFlipped method:
     - return the faceup variable which is should give a boolean value

     displayCard
     - use an if - else statement to return the value of the card if the card is faceup or a single space if the
        card is face down
     - use the chr() function of the value to return the card if the card is faceup


UML:
***********************
GameBoard
***********************
-
***********************
constructor:
    define initializer with variables:
    (self, cols, rows)
methods:
    getBoard
    flipCard
    isCardFlipped
    isMatch

Wordinator Class Development Plan
    First from modules.memorycard import MemoryCard and from random import shuffle
    this class should create a game-board and other methods involved with manipulating cards on the board

    __init_ method:
    - contains three variables:
        self.__columns = cols
        self.__rows = rows
        self.__board = []
    - a nested for loop creates a multidimensional list
        - a list is created and then appended to the self.__board
    - the shuffle function is used to shuffle the self.__board list

    getBoard()
    - returns a single string representation of the game board.
    - does not call print
    - create a variable equal to an empty list so it can be added to
    - use a for loop to create the correct number of rows and colums

    flipCard(xPos, yPos)
    - takes an x, y coordinate from the game board and flips the card at that location.
    - call the toggleFlip() function from MemoryCard class

    isCardFlipped(xPos, yPos)
    - returns true if the card at that position is face-up, otherwise returns false
    - use and if-else statement
    - call the isFlipped() function from MemoryCard class

    isMatch(pos1, pos2)
    - pos1 and pos2 are the x, y locations of two different cards given as a list.
    - use the getValue() function from MemoryCard
    - use and if - else statement