UML:
***********************
Wordinator
***********************
-word
***********************
constructor:
    define initializer with a singular parameter
methods:
    getWord
     __firstWord
     __bigWord
     __wordFactor
     __mixWords
     __midWords
     __switchCase
     backWordSlice
     backWordManual

Wordinator Class Development Plan
    - user inputs two words and are presented with a menu of options to choose from including:
        1) First Word
        2) Big Word
        3) Words Factor
        4) Mix Words
        5) Middle Words
        6) Switched Case Words
        7) Back Words Sliced
        8) Back Words Manual
        9) Quit
    - all of these options are methods in the wordinator class
    - begin by creating constructor with single parameter word
    - create a function to return the self.word as a private variable, so it can be called later in the
      other methods easily
    - begin to implement magic methods before they are used in the functions (described below)
    - first word method:
        Most of this method is already describes in the main() so its main purpose is to make sure the
        words are in alphabetical order by checking them against each other when they are both lower case
        since fan upper case letter is called before a lower case despite where it might be in the alphabet
    - big word
        the main purpose of this method is to capitalize the first letter of the big word after they are
        concatenated together.
        this function makes use the the magic method __add__ to change the + operator
    - word factor
        this method must change the word to all caps and make use of the __mul__ function to iterate the
        word properly
    - mix words
        this method must alternate letters from both words to create a mixed word
        create a for loop from 0 to the length of the smallest number and repeat the for loop by adding a
        letter from each word.
        also, ad a conditional so if one word is shorter, after that word is out of letters just finish
        spelling the second word and vice versa.
    - mid words
        this method prints the middle of both words separately
        to do this, it must eliminate the first quarter and the last quarter and only print the middle
        this can be done using a slice operator
    - back word slice
        this function must return a word backwards and it must use the slice operator
    - back word manual
        this function must do the same as the previous but cannot use a slice and so must use a loop to go
        through each letter in a word backwards


Magic Methods:
    __add__(self, other)
        addition, used in big word
    __mul__(self, other)
        Multiplication, used in word factor to factor a word
    __sub__(self, other)
        subtraction, used in switchcase
    __mod__(self, other)
        Modulus, used in midwords
    __truediv__(self, other)
        used in mixed words
    __str__(self)
        String when object is printed
    __lt__(self, other)
        for comparisons, used in first word
